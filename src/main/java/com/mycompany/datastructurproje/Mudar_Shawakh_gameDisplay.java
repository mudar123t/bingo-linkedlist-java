/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.datastructurproje;

import static com.mycompany.datastructurproje.DataStructurProje.contains;
import static com.mycompany.datastructurproje.DataStructurProje.generatePermutation;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author shawa
 */
public class Mudar_Shawakh_gameDisplay<T> extends javax.swing.JFrame {

    DefaultTableModel model1 = new DefaultTableModel(3, 9);
    DefaultTableModel model2 = new DefaultTableModel(3, 9);
    int[] permutation = generatePermutation(90);
    int counter = 0;
    Mudar_Shawakh_CardLinkedList<Integer> c1;
    Mudar_Shawakh_CardLinkedList<Integer> c2;
    Mudar_Shawakh_CardLinkedList<Integer> multiLinkedList1;
    Mudar_Shawakh_CardLinkedList<Integer> multiLinkedList2;

    /**
     * Creates new form gameDisplay
     */
    public Mudar_Shawakh_gameDisplay() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        t2 = new javax.swing.JTable();
        t1 = new javax.swing.JTable();
        b1 = new javax.swing.JButton();
        l1 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        t2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "", "", "", "", "", "", "", "", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        t2.setRowSelectionAllowed(false);
        t2.getTableHeader().setReorderingAllowed(false);

        t1.setBorder(new javax.swing.border.MatteBorder(null));
        t1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "", "", "", "", "", "", "", "", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        t1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        t1.setRowSelectionAllowed(false);
        t1.getTableHeader().setReorderingAllowed(false);

        b1.setText("Generate");
        b1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Player 1");

        jLabel2.setText("Player 2");

        jButton1.setText("Fill Cards");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(t2, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
                            .addComponent(t1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 108, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(b1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(l1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(196, 196, 196)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 417, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(t1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(t2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(l1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(b1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(73, 73, 73)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );

        if (t2.getColumnModel().getColumnCount() > 0) {
            t2.getColumnModel().getColumn(0).setResizable(false);
            t2.getColumnModel().getColumn(1).setResizable(false);
            t2.getColumnModel().getColumn(2).setResizable(false);
            t2.getColumnModel().getColumn(3).setResizable(false);
            t2.getColumnModel().getColumn(4).setResizable(false);
            t2.getColumnModel().getColumn(5).setResizable(false);
            t2.getColumnModel().getColumn(6).setResizable(false);
            t2.getColumnModel().getColumn(7).setResizable(false);
            t2.getColumnModel().getColumn(8).setResizable(false);
        }
        if (t1.getColumnModel().getColumnCount() > 0) {
            t1.getColumnModel().getColumn(0).setResizable(false);
            t1.getColumnModel().getColumn(1).setResizable(false);
            t1.getColumnModel().getColumn(2).setResizable(false);
            t1.getColumnModel().getColumn(3).setResizable(false);
            t1.getColumnModel().getColumn(4).setResizable(false);
            t1.getColumnModel().getColumn(5).setResizable(false);
            t1.getColumnModel().getColumn(6).setResizable(false);
            t1.getColumnModel().getColumn(7).setResizable(false);
            t1.getColumnModel().getColumn(8).setResizable(false);
        }

        getContentPane().add(jPanel1);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public DefaultTableModel updateTableModel(Mudar_Shawakh_CardLinkedList<Integer> cardLinkedList, DefaultTableModel tableModel) {
        Mudar_Shawakh_Node<T> currentRow = cardLinkedList.head;
        int rowIndex = 0;

        while (currentRow != null && rowIndex < 3) {
            Mudar_Shawakh_Node<T> current = currentRow;
            int colIndex = 0;

            while (current != null) {
                int value = (int) current.data;
                int targetCol = (value - 1) / 10;

                if (targetCol >= 0 && targetCol < 9) {
                    tableModel.setValueAt(value, rowIndex, targetCol);
                }

                current = current.next;
                colIndex++;
            }

            rowIndex++;
            currentRow = currentRow.down;
        }
        return tableModel;
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        model1 = new DefaultTableModel(3, 9);
        model2 = new DefaultTableModel(3, 9);
        Mudar_Shawakh_CardClass card1 = new Mudar_Shawakh_CardClass(3, 9);
        card1.generateCard();
        Mudar_Shawakh_CardClass card2 = new Mudar_Shawakh_CardClass(3, 9);
        card2.generateCard();

        c1 = new Mudar_Shawakh_CardLinkedList<>();
        multiLinkedList1 = c1.createMultiLinkedList(card1.array);
        c2 = new Mudar_Shawakh_CardLinkedList<>();
        multiLinkedList2 = c2.createMultiLinkedList(card2.array);
        model1 = updateTableModel(multiLinkedList1, model1);
        model2 = updateTableModel(multiLinkedList2, model2);
        t1.setModel(model1);
        t2.setModel(model2);
    }//GEN-LAST:event_jButton1ActionPerformed
    public static boolean contains(int[] array, int data) {
        for (int i = 0; i < array.length; i++) {
            if (array[i] == data) {
                return true;
            }
        }
        return false;
    }

    public static int[] generatePermutation(int number) {
        Random random = new Random();
        int[] permutation = new int[number - 1];

        for (int i = 0; i < number - 1; i++) {
            int x = random.nextInt(number - 1) + 1;
            while (contains(permutation, x)) {
                x = random.nextInt(number - 1) + 1;
            }
            permutation[i] = x;
        }

        return permutation;
    }

    public void iterateCard(Mudar_Shawakh_CardLinkedList<Integer> card, int num) {
        Mudar_Shawakh_Node<Integer> currentRowHead = card.head;
        while (currentRowHead != null) { // Traverse rows
            Mudar_Shawakh_Node<Integer> currentColumnHead = currentRowHead;
            while (currentColumnHead != null) { // Traverse columns
                if (currentColumnHead.data.equals(num)) {
                    currentColumnHead.data = 0;
                }
                currentColumnHead = currentColumnHead.next;
            }
            currentRowHead = currentRowHead.down;
        }
    }
    public boolean check(Mudar_Shawakh_CardLinkedList<Integer> card) {
        Mudar_Shawakh_Node<Integer> currentRowHead = card.head;
        while (currentRowHead != null) { 
            Mudar_Shawakh_Node<Integer> currentColumnHead = currentRowHead;
            int countRow = 0;
            while (currentColumnHead != null) { 
                if (currentColumnHead.data == 0) {
                    countRow++;
                }
                currentColumnHead = currentColumnHead.next;
            }
            currentRowHead = currentRowHead.down;
            if (countRow == 5) {
                return true;
            }
        }
        return false;
    }

    public boolean check2(Mudar_Shawakh_CardLinkedList<Integer> card) {
        int count2 = 0;
        Mudar_Shawakh_Node<Integer> currentRowHead = card.head;
        while (currentRowHead != null) { // Traverse rows
            Mudar_Shawakh_Node<Integer> currentColumnHead = currentRowHead;
            int countRow = 0;
            while (currentColumnHead != null) { // Traverse columns
                if (currentColumnHead.data == 0) {
                    countRow++;
                }
                currentColumnHead = currentColumnHead.next;
            }
            currentRowHead = currentRowHead.down;
            if (countRow == 5) {
                count2++;
            }
        }
        if (count2 == 2) {
            return true;
        }
        return false;
    }

    public boolean check3(Mudar_Shawakh_CardLinkedList<Integer> card) {
        Mudar_Shawakh_Node<Integer> currentRowHead = card.head;
        int countRow = 0;
        while (currentRowHead != null) { // Traverse rows
            Mudar_Shawakh_Node<Integer> currentColumnHead = currentRowHead;
            while (currentColumnHead != null) { // Traverse columns
                if (currentColumnHead.data == 0) {
                    countRow++;
                }
                currentColumnHead = currentColumnHead.next;
            }
            currentRowHead = currentRowHead.down;

        }
        if (countRow == 15) {
            return true;
        }
        return false;
    }
    static boolean player1Bingo = false;
    static boolean player1Bingo2 = false;
    static boolean player2Bingo = false;
    static boolean player2Bingo2 = false;
    private void b1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b1ActionPerformed
        
        if (counter < 89) {
            l1.setText(String.valueOf(permutation[counter ]));
            counter++;
            iterateCard(multiLinkedList1, permutation[counter ]);
            if (check(multiLinkedList1) && player1Bingo == false) {
                JOptionPane.showMessageDialog(rootPane, "First plyer bingo");
                player1Bingo = true;
            }
            if (check2(multiLinkedList1)&& player1Bingo2 == false) {
                JOptionPane.showMessageDialog(rootPane, "first plyer second bingo");
                player1Bingo2 = true;
            }
            if (check3(multiLinkedList1)){
                 JOptionPane.showMessageDialog(rootPane, "first plyer Tombala congrats you won");
            }
            iterateCard(multiLinkedList2, permutation[counter - 1]);
            if (check(multiLinkedList2) && player2Bingo == false) {
                JOptionPane.showMessageDialog(rootPane, "second plyer bingo");
                player2Bingo = true;
            }
            if (check2(multiLinkedList2) && player2Bingo2 == false) {
                JOptionPane.showMessageDialog(rootPane, "second plyer bingo");
                player2Bingo2 = true;
            }
            if (check3(multiLinkedList2)){
                 JOptionPane.showMessageDialog(rootPane, "second plyer Tombala congrats you won");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "All numbers have been showed");
        }
    }//GEN-LAST:event_b1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Mudar_Shawakh_gameDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Mudar_Shawakh_gameDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Mudar_Shawakh_gameDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Mudar_Shawakh_gameDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Mudar_Shawakh_gameDisplay().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b1;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel l1;
    private javax.swing.JTable t1;
    private javax.swing.JTable t2;
    // End of variables declaration//GEN-END:variables
}
